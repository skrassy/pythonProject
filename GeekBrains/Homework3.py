# Задание 1. Реализовать функцию, принимающую два числа (позиционные аргументы)
# и выполняющую их деление. Числа запрашивать у пользователя, предусмотреть
# обработку ситуации деления на ноль.
def my_calculate():
    try:
        arg_1 = float(input("Введите значение arg_1 >>>"))
        arg_2 = float(input("Введите значение arg_2 >>>"))
        div = arg_1 / arg_2
    except ZeroDivisionError:
        return

    return div


print(my_calculate())


# Задание 2. Реализовать функцию, принимающую несколько параметров, описывающих
# данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.

def user_data(firstname, lastname, birth_year, city, email, phone):
    return f"Имя: {firstname}; " \
           f"Фамилия: {lastname}; " \
           f"Год рождения: {birth_year}; " \
           f"Город: {city}; " \
           f"E-mail: {email}; " \
           f"Телефон: {phone} "


print(
    user_data(
        firstname="Ivan",
        lastname="Petrov",
        birth_year=1980,
        city="Moscow",
        email="ivan@mail.ru",
        phone="89045678432"))


# Задание 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
# и возвращает сумму наибольших двух аргументов.

def my_func(arg_1, arg_2, arg_3):
    my_list = [arg_1, arg_2, arg_3]
    my_list.sort()
    summa = my_list[1] + my_list[2]
    return summa


print(my_func(12, 11, 32))


# Задание 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде
# функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции
# возведения числа в степень.

# Способ 1

def my_func():
    x = abs(float(input("Введите действительное положительное число х >>>")))
    y = int(input("Введите целое отрицательное число у >>>"))
    exponent = x ** y
    return exponent


print(my_func())


# Способ 2

def my_func_2():
    x = abs(float(input("Введите действительное положительное число х >>>")))
    y = abs(int(input("Введите целое отрицательное число у >>>")))
    exponent = 1
    for el in range(y):
        exponent = exponent * 1 / x
    return exponent


print(my_func_2())


# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить
# ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных
# чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится
# специальный символ, выполнение программы завершается. Если специальный символ
# введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной
# ранее сумме и после этого завершить программу.

def new_my_func():
    global summa, flag
    summa = 0
    flag = True
    print(summa)
    while flag:
        my_list = input("Введите ряд чисел, разделенных пробелами. Для выхода введите любой символ, не являющийся "
                        "числом >>>").split(" ")
        for el in my_list:
            try:
                summa = summa + int(el)
            except ValueError:
                flag = False
        print(summa)
    return summa


print(new_my_func())


# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же,
# но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое
# слово должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().

def int_func(word):
    new_word = word.title()
    return new_word


print(int_func("spring"))


def new_int_func():
    my_string = input("Введите слова в нижнем регистре через пробел").split(" ")
    new_my_string = []
    for el in my_string:
        new_my_string.append(int_func(el))

    return new_my_string


print(' '.join(new_int_func()))
